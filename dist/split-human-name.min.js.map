{"mappings":"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","sources":["src/index.js","node_modules/@compwright/namecase/src/index.js","node_modules/humanparser/index.js","src/browser.js"],"sourcesContent":["const nameCase = require('@compwright/namecase');\nconst human = require('humanparser');\n\nfunction combineFullName (parts) {\n  return (combineFirstName(parts) + ' ' + combineLastName(parts)).trim();\n}\n\nfunction combineFirstName ({ salutation, firstName, middleName }) {\n  return [salutation, firstName, middleName].filter(s => !!s).join(' ').trim();\n}\n\nfunction combineLastName ({ lastName, suffix }) {\n  return lastName + (suffix ? ', ' + suffix : '');\n}\n\nfunction normalizeNameWithTitle (parts, i, names) {\n  // { salutation: 'Dr', lastName: 'John' } => { salutation: 'Dr', firstName: 'John' }\n  if (!parts.firstName && parts.lastName && i === 0 && names.length > 1) {\n    parts.firstName = parts.lastName;\n    delete parts.lastName;\n  }\n  return parts;\n}\n\nfunction normalizeMiddleName (parts, i, names) {\n  // { firstName: 'Danial', lastName: 'P.' } => { firstName: 'Danial', middleName: 'P.' }\n  if (!parts.middleName && (/\\b[A-Z]{1}\\.?\\b/i).test(parts.lastName) && i === 0 && names.length > 1) {\n    parts.middleName = parts.lastName;\n    delete parts.lastName;\n  }\n  return parts;\n}\n\nconst splitter = / and | & /i;\n\nfunction splitName (name) {\n  // Extract the first \"and\" or &\n  const conjuction = splitter.test(name) && (\n    ' ' + name.match(splitter)[0].trim().toLowerCase() + ' '\n  );\n\n  const names = name\n    .split(splitter)\n    .map(nameCase)\n    .map(name => human.parseName(name))\n    .map(normalizeNameWithTitle)\n    .map(normalizeMiddleName);\n\n  // Curly & Moe & Larry\n  if (names.length > 2) {\n    return {\n      firstName: nameCase(name),\n      lastName: ''\n    };\n  }\n\n  if (names.length === 2) {\n    let firstName = names.map(combineFirstName).join(conjuction);\n    let lastName = '';\n\n    // John Smith and Mary Smith\n    if (names[0].lastName === names[1].lastName) {\n      lastName = combineLastName(names[1]);\n    // John and Mary Smith\n    } else if (!names[0].lastName) {\n      lastName = combineLastName(names[1]);\n    // John Smith and Mary\n    } else if (!names[1].lastName) {\n      lastName = combineLastName(names[0]);\n    // John Smith and Jane Doe\n    } else {\n      firstName = nameCase(name);\n      lastName = '';\n    }\n\n    return { firstName, lastName };\n  }\n\n  return {\n    firstName: combineFirstName(names[0]),\n    lastName: combineLastName(names[0])\n  };\n}\n\nmodule.exports = splitName;\n\nmodule.exports.combineFirstName = combineFirstName;\nmodule.exports.combineLastName = combineLastName;\nmodule.exports.combineFullName = combineFullName;\n","// Don't change capitalization unless capitalization isn't set\nconst checkName = name => name === name.toLowerCase() || name === name.toUpperCase();\n\n// Strip out extraneous spaces\nconst normalize = name => name.replace(/\\s{2,}/g, ' ');\n\n// Actual case fixing function\nfunction nc (el, opt = {}) {\n  el = el.trim().toLowerCase();\n\n  // Split names on regex whitespace, dash or apostrophe, workaround for\n  // Javascript regex word boundary \\b splitting on unicode characters\n  // http://stackoverflow.com/questions/5311618/javascript-regular-expression-problem-with-b-and-international-characters\n  const splitters = [\n    { s: /\\s/, r: ' ' },\n    { s: /-/, r: '-' },\n    { s: /'/, r: \"'\" },\n    { s: /\"/, r: '\"' },\n    { s: /\\(/, r: '(' },\n    { s: /\\./, r: '.' },\n    { s: /,/, r: ',' },\n    { s: /\\//, r: '/' }\n  ];\n\n  for (let i = 0; i < splitters.length; i++) {\n    const elArr = el.split(splitters[i].s);\n    for (let j = 0; j < elArr.length; j++) {\n      elArr[j] = elArr[j].charAt(0).toUpperCase() + elArr[j].slice(1);\n    }\n    el = elArr.join(splitters[i].r);\n  }\n\n  // Name case Mcs and Macs\n  // Exclude names with 1-2 letters after prefix like Mack, Macky, Mace\n  // Exclude names ending in a,c,i,o, or j are typically Polish or Italian\n  if (\n    /\\bMac[A-Za-z]{2,}[^aciozj]\\b/.test(el) ||\n    /\\bMc/.test(el)\n  ) {\n    el = el.replace(\n      /\\b(Ma?c)([A-Za-z]+)/,\n      (x, y, z) => y + z.charAt(0).toUpperCase() + z.substring(1)\n    );\n\n    // Now correct for \"Mac\" exceptions\n    el = el\n      .replace(/\\bMacEvicius\\b/, 'Macevicius')\n      .replace(/\\bMacHado\\b/, 'Machado')\n      .replace(/\\bMacHar\\b/, 'Machar')\n      .replace(/\\bMacHin\\b/, 'Machin')\n      .replace(/\\bMacHlin\\b/, 'Machlin')\n      .replace(/\\bMacIas\\b/, 'Macias')\n      .replace(/\\bMacIulis\\b/, 'Maciulis')\n      .replace(/\\bMacKie\\b/, 'Mackie')\n      .replace(/\\bMacKle\\b/, 'Mackle')\n      .replace(/\\bMacKlin\\b/, 'Macklin')\n      .replace(/\\bMacQuarie\\b/, 'Macquarie')\n      .replace(/\\bMacOmber\\b/, 'Macomber')\n      .replace(/\\bMacIn\\b/, 'Macin')\n      .replace(/\\bMacKintosh\\b/, 'Mackintosh')\n      .replace(/\\bMacKen\\b/, 'Macken')\n      .replace(/\\bMacHen\\b/, 'Machen')\n      .replace(/\\bMacHiel\\b/, 'Machiel')\n      .replace(/\\bMacIol\\b/, 'Maciol')\n      .replace(/\\bMacKell\\b/, 'Mackell')\n      .replace(/\\bMacKlem\\b/, 'Macklem')\n      .replace(/\\bMacKrell\\b/, 'Mackrell')\n      .replace(/\\bMacLin\\b/, 'Maclin')\n      .replace(/\\bMacKey\\b/, 'Mackey')\n      .replace(/\\bMacKley\\b/, 'Mackley')\n      .replace(/\\bMacHell\\b/, 'Machell')\n      .replace(/\\bMacHon\\b/, 'Machon')\n      .replace(/\\bMacAyla\\b/, 'Macayla');\n  }\n\n  // And correct Mac exceptions otherwise missed\n  el = el\n    .replace(/\\bMacmurdo/, 'MacMurdo')\n    .replace(/\\bMacisaac/, 'MacIsaac')\n\n  // Fixes for \"son (daughter) of\" etc. in various languages.\n    .replace(/\\bAl(?=\\s+\\w)\\b/g, 'al') // al Arabic or forename Al.\n    .replace(/\\bAp\\b/g, 'ap') // ap Welsh.\n    .replace(/\\bBen(?=\\s+\\w)\\b/g, 'ben') // ben Hebrew or forename Ben.\n    .replace(/\\bDell([ae])\\b/g, 'dell$1') // della and delle Italian.\n    .replace(/\\bD([aeiu])\\b/g, 'd$1') // da, de, di Italian; du French.\n    .replace(/\\bDe([lr])\\b/g, 'de$1') // del Italian; der Dutch/Flemish.\n    .replace(/\\bEl\\b/g, 'el') // el Greek\n    .replace(/\\bLa\\b/g, 'la') // la French\n    .replace(/\\bLe(?=\\s+\\w)\\b/g, 'le') // le French\n    .replace(/\\bLo\\b/g, 'lo') // lo Italian\n    .replace(/\\bVan(?=\\s+\\w)\\b/g, 'van') // van German or forename Van.\n    .replace(/\\bVon\\b/g, 'von') // von Dutch/Flemish\n\n  // Fixes for roman numeral names, e.g. Henry VIII\n    .replace(/\\b(?:\\d{4}|(?:[IVX])(?:X{0,3}I{0,3}|X{0,2}VI{0,3}|X{0,2}I?[VX]))$/i, v => v.toUpperCase())\n\n  // Nation of Islam 2X, 3X, etc. names\n    .replace(/\\b[0-9](x)\\b/, v => v.toUpperCase())\n\n  // Somewhat arbitrary rule where two letter combos not containing vowels should be capitalized\n  // fixes /JJ Abrams/ and /JD Salinger/\n  // With some exceptions\n    .replace(/\\b[bcdfghjklmnpqrstvwxzBCDFGHJKLMNPQRSTVWXZ]{2}\\s/, v => v.toUpperCase())\n    .replace(/\\bMR\\.?\\b/, 'Mr')\n    .replace(/\\bMS\\.?\\b/, 'Ms')\n    .replace(/\\bDR\\.?\\b/, 'Dr')\n    .replace(/\\bST\\.?\\b/, 'St')\n    .replace(/\\bJR\\.?\\b/, 'Jr')\n    .replace(/\\bSR\\.?\\b/, 'Sr')\n    .replace(/\\bLT\\.?\\b/, 'Lt')\n\n  // lowercase words\n    .replace(/\\bThe\\b/g, 'the')\n    .replace(/\\bOf\\b/g, 'of')\n    .replace(/\\bAnd\\b/g, 'and')\n    .replace(/\\bY\\s/g, 'y')\n\n  // strip extra spaces\n    .replace(/\\s{2,}/g, ' ');\n\n  // check if we should force the first character to caps\n  if (opt.individualFields === true) {\n    // first character may be lowercase\n    return el;\n  }\n\n  // force first character to be uppercase\n  return el.charAt(0).toUpperCase() + el.substring(1);\n}\n\nfunction namecase (input, opt) {\n  if (Array.isArray(input)) {\n    return input.map(namecase);\n  }\n\n  if (typeof input === 'string') {\n    return nc(input, opt);\n  }\n\n  return input;\n}\n\nmodule.exports = namecase;\nmodule.exports.checkName = checkName;\nmodule.exports.normalize = normalize;\n","const parser = module.exports = {};\n\nfunction diff(a1, a2) {\n\treturn a1.concat(a2).filter((val, index, arr) => {\n\t\treturn arr.indexOf(val) === arr.lastIndexOf(val);\n\t});\n}\n\nparser.parseName = function (name, ignoreSuffix) {\n\tif (!ignoreSuffix) ignoreSuffix = []\n\tconst salutations = ['mr', 'master', 'mister', 'mrs', 'miss', 'ms', 'dr', 'prof', 'rev', 'fr', 'judge', 'honorable', 'hon', 'tuan', 'sr', 'srta', 'br', 'pr', 'mx', 'sra'];\n\tconst suffixes = ['i', 'ii', 'iii', 'iv', 'v', 'senior', 'junior', 'jr', 'sr', 'phd', 'apr', 'rph', 'pe', 'md', 'ma', 'dmd', 'cme', 'qc', 'kc'].filter(suffix => !ignoreSuffix.includes(suffix));\n\tconst compound = ['vere', 'von', 'van', 'de', 'del', 'della', 'der', 'den', 'di', 'da', 'pietro', 'vanden', 'du', 'st.', 'st', 'la', 'lo', 'ter', 'bin', 'ibn', 'te', 'ten', 'op', 'ben', 'al'];\n\n\tlet parts = name\n\t\t.trim()\n\t\t.replace(/\\b\\s+(,\\s+)\\b/, '$1') // fix name , suffix -> name, suffix\n\t\t.replace(/\\b,\\b/, ', ')         // fix name,suffix -> name, suffix\n\t// look for quoted compound names\n\tparts = (parts.match(/[^\\s\"]+|\"[^\"]+\"/g) || parts.split(/\\s+/)).map(n => n.match(/^\".*\"$/) ? n.slice(1, -1) : n)\n\tconst attrs = {};\n\n\tif (!parts.length) {\n\t\treturn attrs;\n\t}\n\n\tif (parts.length === 1) {\n\t\tattrs.firstName = parts[0];\n\t}\n\n\t//handle suffix first always, remove trailing comma if there is one\n\tif (parts.length > 1 && suffixes.indexOf(parts[parts.length - 1].toLowerCase().replace(/\\./g, '')) > -1) {\n\t\tattrs.suffix = parts.pop();\n\t\tparts[parts.length - 1] = parts[parts.length - 1].replace(',', '');\n\t}\n\n\t//look for a comma to know we have last name first format\n\tconst firstNameFirstFormat = parts.every(part => {\n\t\treturn part.indexOf(',') === -1;\n\t});\n\n\tif (!firstNameFirstFormat) {\n\t\t//last name first format\n\t\t//assuming salutations are never used in this format\n\n\t\t//tracker variable for where first name begins in parts array\n\t\tlet firstNameIndex;\n\n\t\t//location of first comma will separate last name from rest\n\t\t//join all parts leading to first comma as last name\n\t\tconst lastName = parts.reduce((lastName, current, index) => {\n\t\t\tif (!Array.isArray(lastName)) {\n\t\t\t\treturn lastName;\n\t\t\t}\n\t\t\tif (current.indexOf(',') === -1) {\n\t\t\t\tlastName.push(current);\n\t\t\t\treturn lastName;\n\t\t\t} else {\n\t\t\t\tcurrent = current.replace(',', '');\n\n\t\t\t\t// handle case where suffix is included in part of last name (ie: 'Hearst Jr., Willian Randolph')\n\t\t\t\tif (suffixes.indexOf(current.toLowerCase().replace(/\\./g, '')) > -1) {\n\t\t\t\t\tattrs.suffix = current;\n\t\t\t\t} else {\n\t\t\t\t\tlastName.push(current);\n\t\t\t\t}\n\n\t\t\t\tfirstNameIndex = index + 1;\n\t\t\t\treturn lastName.join(' ');\n\t\t\t}\n\t\t}, []);\n\n\t\tattrs.lastName = lastName;\n\n\t\tvar remainingParts = parts.slice(firstNameIndex);\n\t\tif (remainingParts.length > 1) {\n\t\t\tattrs.firstName = remainingParts.shift();\n\t\t\tattrs.middleName = remainingParts.join(' ');\n\t\t} else if (remainingParts.length) {\n\t\t\tattrs.firstName = remainingParts[0];\n\t\t}\n\n\t\t//create full name from attrs object\n\t\tconst nameWords = [];\n\t\tif (attrs.firstName) {\n\t\t\tnameWords.push(attrs.firstName);\n\t\t}\n\t\tif (attrs.middleName) {\n\t\t\tnameWords.push(attrs.middleName)\n\t\t}\n\t\tnameWords.push(attrs.lastName)\n\t\tif (attrs.suffix) {\n\t\t\tnameWords.push(attrs.suffix);\n\t\t}\n\t\tattrs.fullName = nameWords.join(' ');\n\n\n\t} else {\n\t\t//first name first format\n\n\n\t\tif (parts.length > 1 && salutations.indexOf(parts[0].toLowerCase().replace(/\\./g, '')) > -1) {\n\t\t\tattrs.salutation = parts.shift();\n\n\t\t\t// if we have a salutation assume 2nd part is last name\n\t\t\tif (parts.length === 1) {\n\t\t\t\tattrs.lastName = parts.shift();\n\t\t\t} else {\n\t\t\t\tattrs.firstName = parts.shift();\n\t\t\t}\n\t\t} else {\n\t\t\tattrs.firstName = parts.shift();\n\t\t}\n\n\t\tif (!attrs.lastName) {\n\t\t\tattrs.lastName = parts.length ? parts.pop() : '';\n\t\t}\n\n\t\t// test for compound last name, we reverse because middle name is last bit to be defined.\n\t\t// We already know lastname, so check next word if its part of a compound last name.\n\t\tconst revParts = parts.slice(0).reverse();\n\t\tconst compoundParts = [];\n\n\t\trevParts.every(part => {\n\t\t\tconst test = part.toLowerCase().replace(/\\./g, '');\n\n\t\t\tif (compound.indexOf(test) > -1) {\n\t\t\t\tcompoundParts.push(part);\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t//break on first non compound word\n\t\t\treturn false;\n\t\t});\n\n\t\t//join compound parts with known last name\n\t\tif (compoundParts.length) {\n\t\t\tattrs.lastName = compoundParts.reverse().join(' ') + ' ' + attrs.lastName;\n\n\t\t\tparts = diff(parts, compoundParts);\n\t\t}\n\n\t\tif (parts.length) {\n\t\t\tattrs.middleName = parts.join(' ');\n\t\t}\n\n\t\t//remove comma like \"<lastName>, Jr.\"\n\t\tif (attrs.lastName) {\n\t\t\tattrs.lastName = attrs.lastName.replace(',', '');\n\t\t}\n\n\t\t//save a copy of original\n\t\tattrs.fullName = name;\n\n\t}\n\t//console.log('attrs:', JSON.stringify(attrs));\n\n\tfor (const [k, v] of Object.entries(attrs)) {\n\t\tattrs[k] = v.trim()\n\t}\n\treturn attrs;\n};\n\nparser.getFullestName = (str) => {\n\tlet name = str;\n\tlet names = [];\n\n\t//find fullname from strings like 'Jon and Sue Doyle'\n\tif (name.indexOf('&') > -1 || name.toLowerCase().indexOf(' and ') > -1) {\n\t\tnames = name.split(/\\s+(?:and|&)\\s+/gi);\n\n\t\t//pluck the name with the most parts (first, middle, last) from the array.\n\t\t//will grab 'Sue Doyle' in 'Jon & Sue Anne Doyle'\n\t\tif (names.length) {\n\t\t\tname = names.sort(function (a, b) {\n\t\t\t\treturn b.split(/\\s+/).length - a.split(/\\s+/).length;\n\t\t\t})[0];\n\t\t}\n\t}\n\n\treturn name;\n};\n\nparser.parseAddress = (str) => {\n\tstr = str.replace(/\\n/gi, ', ');\n\t//416 W. Manchester Blvd., Inglewood, CA  90301\n\tconst parts = str.split(/,\\s+/).reverse();\n\tlet stateZip;\n\tlet city;\n\tconst address = {};\n\n\tstateZip = parts[0].split(/\\s+/);\n\tparts.shift();\n\n\tcity = parts.shift();\n\n\taddress.address = parts.reverse().join(', ');\n\taddress.city = city;\n\taddress.state = stateZip[0];\n\taddress.zip = stateZip[1];\n\taddress.fullAddress = str;\n\n\treturn address;\n};\n","global.splitName = require('./index');\n"],"names":["$eSUCD","parcelRequire","$925187557fc60d44$var$combineFirstName","salutation","firstName","middleName","filter","s","join","trim","$925187557fc60d44$var$combineLastName","lastName","suffix","$925187557fc60d44$var$normalizeNameWithTitle","parts","i","names","length","$925187557fc60d44$var$normalizeMiddleName","test","$925187557fc60d44$var$splitter","module","exports","name","conjuction","match","toLowerCase","split","map","$6LqT1","parseName","combineFirstName","combineLastName","combineFullName","$ad6207cf684ec33c$var$namecase","input","opt","Array","isArray","el","splitters","r","elArr","j","charAt","toUpperCase","slice","replace","x","y","z","substring","v","individualFields","$ad6207cf684ec33c$var$nc","checkName","normalize","$4ecbfcf070f5bb09$var$parser","ignoreSuffix","salutations","suffixes","includes","compound","n","attrs","indexOf","pop","every","part","shift","revParts","reverse","compoundParts","push","a2","concat","val","index","arr","lastIndexOf","fullName","firstNameIndex","reduce","current","remainingParts","nameWords","k","Object","entries","getFullestName","str","sort","a","b","parseAddress","stateZip","city","address","state","zip","fullAddress","$parcel$global","splitName"],"version":3,"file":"split-human-name.min.js.map"}
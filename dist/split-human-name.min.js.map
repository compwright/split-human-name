{"mappings":"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","sources":["src/index.js","node_modules/@compwright/namecase/src/index.js","node_modules/humanparser/index.js","src/browser.js"],"sourcesContent":["const nameCase = require('@compwright/namecase');\nconst human = require('humanparser');\n\nfunction combineFullName (parts) {\n  return (combineFirstName(parts) + ' ' + combineLastName(parts)).trim();\n}\n\nfunction combineFirstName ({ salutation, firstName, middleName }) {\n  return [salutation, firstName, middleName].filter(s => !!s).join(' ').trim();\n}\n\nfunction combineLastName ({ lastName, suffix }) {\n  return lastName + (suffix ? ', ' + suffix : '');\n}\n\nfunction normalizeNameWithTitle (parts, i, names) {\n  // { salutation: 'Dr', lastName: 'John' } => { salutation: 'Dr', firstName: 'John' }\n  if (!parts.firstName && parts.lastName && i === 0 && names.length > 1) {\n    parts.firstName = parts.lastName;\n    delete parts.lastName;\n  }\n  return parts;\n}\n\nfunction normalizeMiddleName (parts, i, names) {\n  // { firstName: 'Danial', lastName: 'P.' } => { firstName: 'Danial', middleName: 'P.' }\n  if (!parts.middleName && (/\\b[A-Z]{1}\\.?\\b/i).test(parts.lastName) && i === 0 && names.length > 1) {\n    parts.middleName = parts.lastName;\n    delete parts.lastName;\n  }\n  return parts;\n}\n\nconst splitter = / and | & /i;\n\nfunction splitName (name) {\n  // Extract the first \"and\" or &\n  const conjuction = splitter.test(name) && (\n    ' ' + name.match(splitter)[0].trim().toLowerCase() + ' '\n  );\n\n  const names = name\n    .split(splitter)\n    .map(nameCase)\n    .map(name => human.parseName(name))\n    .map(normalizeNameWithTitle)\n    .map(normalizeMiddleName);\n\n  // Curly & Moe & Larry\n  if (names.length > 2) {\n    return {\n      firstName: nameCase(name),\n      lastName: ''\n    };\n  }\n\n  if (names.length === 2) {\n    let firstName = names.map(combineFirstName).join(conjuction);\n    let lastName = '';\n\n    // John Smith and Mary Smith\n    if (names[0].lastName === names[1].lastName) {\n      lastName = combineLastName(names[1]);\n    // John and Mary Smith\n    } else if (!names[0].lastName) {\n      lastName = combineLastName(names[1]);\n    // John Smith and Mary\n    } else if (!names[1].lastName) {\n      lastName = combineLastName(names[0]);\n    // John Smith and Jane Doe\n    } else {\n      firstName = nameCase(name);\n      lastName = '';\n    }\n\n    return { firstName, lastName };\n  }\n\n  return {\n    firstName: combineFirstName(names[0]),\n    lastName: combineLastName(names[0])\n  };\n}\n\nmodule.exports = splitName;\n\nmodule.exports.combineFirstName = combineFirstName;\nmodule.exports.combineLastName = combineLastName;\nmodule.exports.combineFullName = combineFullName;\n","// Don't change capitalization unless capitalization isn't set\nconst checkName = name => name === name.toLowerCase() || name === name.toUpperCase();\n\n// Strip out extraneous spaces\nconst normalize = name => name.replace(/\\s{2,}/g, ' ');\n\n// Actual case fixing function\nfunction nc (el, opt = {}) {\n  el = el.trim().toLowerCase();\n\n  // Split names on regex whitespace, dash or apostrophe, workaround for\n  // Javascript regex word boundary \\b splitting on unicode characters\n  // http://stackoverflow.com/questions/5311618/javascript-regular-expression-problem-with-b-and-international-characters\n  const splitters = [\n    { s: /\\s/, r: ' ' },\n    { s: /-/, r: '-' },\n    { s: /'/, r: \"'\" },\n    { s: /\"/, r: '\"' },\n    { s: /\\(/, r: '(' },\n    { s: /\\./, r: '.' },\n    { s: /,/, r: ',' },\n    { s: /\\//, r: '/' }\n  ];\n\n  for (let i = 0; i < splitters.length; i++) {\n    const elArr = el.split(splitters[i].s);\n    for (let j = 0; j < elArr.length; j++) {\n      elArr[j] = elArr[j].charAt(0).toUpperCase() + elArr[j].slice(1);\n    }\n    el = elArr.join(splitters[i].r);\n  }\n\n  // Name case Mcs and Macs\n  // Exclude names with 1-2 letters after prefix like Mack, Macky, Mace\n  // Exclude names ending in a,c,i,o, or j are typically Polish or Italian\n  if (\n    /\\bMac[A-Za-z]{2,}[^aciozj]\\b/.test(el) ||\n    /\\bMc/.test(el)\n  ) {\n    el = el.replace(\n      /\\b(Ma?c)([A-Za-z]+)/,\n      (x, y, z) => y + z.charAt(0).toUpperCase() + z.substring(1)\n    );\n\n    // Now correct for \"Mac\" exceptions\n    el = el\n      .replace(/\\bMacEvicius\\b/, 'Macevicius')\n      .replace(/\\bMacHado\\b/, 'Machado')\n      .replace(/\\bMacHar\\b/, 'Machar')\n      .replace(/\\bMacHin\\b/, 'Machin')\n      .replace(/\\bMacHlin\\b/, 'Machlin')\n      .replace(/\\bMacIas\\b/, 'Macias')\n      .replace(/\\bMacIulis\\b/, 'Maciulis')\n      .replace(/\\bMacKie\\b/, 'Mackie')\n      .replace(/\\bMacKle\\b/, 'Mackle')\n      .replace(/\\bMacKlin\\b/, 'Macklin')\n      .replace(/\\bMacQuarie\\b/, 'Macquarie')\n      .replace(/\\bMacOmber\\b/, 'Macomber')\n      .replace(/\\bMacIn\\b/, 'Macin')\n      .replace(/\\bMacKintosh\\b/, 'Mackintosh')\n      .replace(/\\bMacKen\\b/, 'Macken')\n      .replace(/\\bMacHen\\b/, 'Machen')\n      .replace(/\\bMacHiel\\b/, 'Machiel')\n      .replace(/\\bMacIol\\b/, 'Maciol')\n      .replace(/\\bMacKell\\b/, 'Mackell')\n      .replace(/\\bMacKlem\\b/, 'Macklem')\n      .replace(/\\bMacKrell\\b/, 'Mackrell')\n      .replace(/\\bMacLin\\b/, 'Maclin')\n      .replace(/\\bMacKey\\b/, 'Mackey')\n      .replace(/\\bMacKley\\b/, 'Mackley')\n      .replace(/\\bMacHell\\b/, 'Machell')\n      .replace(/\\bMacHon\\b/, 'Machon')\n      .replace(/\\bMacAyla\\b/, 'Macayla');\n  }\n\n  // And correct Mac exceptions otherwise missed\n  el = el\n    .replace(/\\bMacmurdo/, 'MacMurdo')\n    .replace(/\\bMacisaac/, 'MacIsaac')\n\n  // Fixes for \"son (daughter) of\" etc. in various languages.\n    .replace(/\\bAl(?=\\s+\\w)\\b/g, 'al') // al Arabic or forename Al.\n    .replace(/\\bAp\\b/g, 'ap') // ap Welsh.\n    .replace(/\\bBen(?=\\s+\\w)\\b/g, 'ben') // ben Hebrew or forename Ben.\n    .replace(/\\bDell([ae])\\b/g, 'dell$1') // della and delle Italian.\n    .replace(/\\bD([aeiu])\\b/g, 'd$1') // da, de, di Italian; du French.\n    .replace(/\\bDe([lr])\\b/g, 'de$1') // del Italian; der Dutch/Flemish.\n    .replace(/\\bEl\\b/g, 'el') // el Greek\n    .replace(/\\bLa\\b/g, 'la') // la French\n    .replace(/\\bLe(?=\\s+\\w)\\b/g, 'le') // le French\n    .replace(/\\bLo\\b/g, 'lo') // lo Italian\n    .replace(/\\bVan(?=\\s+\\w)\\b/g, 'van') // van German or forename Van.\n    .replace(/\\bVon\\b/g, 'von') // von Dutch/Flemish\n\n  // Fixes for roman numeral names, e.g. Henry VIII\n    .replace(/\\b(?:\\d{4}|(?:[IVX])(?:X{0,3}I{0,3}|X{0,2}VI{0,3}|X{0,2}I?[VX]))$/i, v => v.toUpperCase())\n\n  // Nation of Islam 2X, 3X, etc. names\n    .replace(/\\b[0-9](x)\\b/, v => v.toUpperCase())\n\n  // Somewhat arbitrary rule where two letter combos not containing vowels should be capitalized\n  // fixes /JJ Abrams/ and /JD Salinger/\n  // With some exceptions\n    .replace(/\\b[bcdfghjklmnpqrstvwxzBCDFGHJKLMNPQRSTVWXZ]{2}\\s/, v => v.toUpperCase())\n    .replace(/\\bMR\\.?\\b/, 'Mr')\n    .replace(/\\bMS\\.?\\b/, 'Ms')\n    .replace(/\\bDR\\.?\\b/, 'Dr')\n    .replace(/\\bST\\.?\\b/, 'St')\n    .replace(/\\bJR\\.?\\b/, 'Jr')\n    .replace(/\\bSR\\.?\\b/, 'Sr')\n    .replace(/\\bLT\\.?\\b/, 'Lt')\n\n  // lowercase words\n    .replace(/\\bThe\\b/g, 'the')\n    .replace(/\\bOf\\b/g, 'of')\n    .replace(/\\bAnd\\b/g, 'and')\n    .replace(/\\bY\\s/g, 'y')\n\n  // strip extra spaces\n    .replace(/\\s{2,}/g, ' ');\n\n  // check if we should force the first character to caps\n  if (opt.individualFields === true) {\n    // first character may be lowercase\n    return el;\n  }\n\n  // force first character to be uppercase\n  return el.charAt(0).toUpperCase() + el.substring(1);\n}\n\nfunction namecase (input, opt) {\n  if (Array.isArray(input)) {\n    return input.map(namecase);\n  }\n\n  if (typeof input === 'string') {\n    return nc(input, opt);\n  }\n\n  return input;\n}\n\nmodule.exports = namecase;\nmodule.exports.checkName = checkName;\nmodule.exports.normalize = normalize;\n","const parser = module.exports = {};\n\nfunction diff(a1, a2) {\n\treturn a1.concat(a2).filter((val, index, arr) => {\n\t\treturn arr.indexOf(val) === arr.lastIndexOf(val);\n\t});\n}\n\nparser.parseName = function (name, ignoreSuffix) {\n\tif (!ignoreSuffix) ignoreSuffix = []\n\tconst salutations = ['mr', 'master', 'mister', 'mrs', 'miss', 'ms', 'dr', 'prof', 'rev', 'fr', 'judge', 'honorable', 'hon', 'tuan', 'sr', 'srta', 'br', 'pr', 'mx', 'sra'];\n\tconst suffixes = ['i', 'ii', 'iii', 'iv', 'v', 'senior', 'junior', 'jr', 'sr', 'phd', 'apr', 'rph', 'pe', 'md', 'ma', 'dmd', 'cme', 'qc', 'kc'].filter(suffix => !ignoreSuffix.includes(suffix));\n\tconst compound = ['vere', 'von', 'van', 'de', 'del', 'della', 'der', 'den', 'di', 'da', 'pietro', 'vanden', 'du', 'st.', 'st', 'la', 'lo', 'ter', 'bin', 'ibn', 'te', 'ten', 'op', 'ben', 'al'];\n\n\tlet parts = name\n\t\t.trim()\n\t\t.replace(/\\b\\s+(,\\s+)\\b/, '$1') // fix name , suffix -> name, suffix\n\t\t.replace(/\\b,\\b/, ', ')         // fix name,suffix -> name, suffix\n\t// look for quoted compound names\n\tparts = (parts.match(/[^\\s\"]+|\"[^\"]+\"/g) || parts.split(/\\s+/)).map(n => n.match(/^\".*\"$/) ? n.slice(1, -1) : n)\n\tconst attrs = {};\n\n\tif (!parts.length) {\n\t\treturn attrs;\n\t}\n\n\tif (parts.length === 1) {\n\t\tattrs.firstName = parts[0];\n\t}\n\n\t//handle suffix first always, remove trailing comma if there is one\n\tif (parts.length > 1 && suffixes.indexOf(parts[parts.length - 1].toLowerCase().replace(/\\./g, '')) > -1) {\n\t\tattrs.suffix = parts.pop();\n\t\tparts[parts.length - 1] = parts[parts.length - 1].replace(',', '');\n\t}\n\n\t//look for a comma to know we have last name first format\n\tconst firstNameFirstFormat = parts.every(part => {\n\t\treturn part.indexOf(',') === -1;\n\t});\n\n\tif (!firstNameFirstFormat) {\n\t\t//last name first format\n\t\t//assuming salutations are never used in this format\n\n\t\t//tracker variable for where first name begins in parts array\n\t\tlet firstNameIndex;\n\n\t\t//location of first comma will separate last name from rest\n\t\t//join all parts leading to first comma as last name\n\t\tconst lastName = parts.reduce((lastName, current, index) => {\n\t\t\tif (!Array.isArray(lastName)) {\n\t\t\t\treturn lastName;\n\t\t\t}\n\t\t\tif (current.indexOf(',') === -1) {\n\t\t\t\tlastName.push(current);\n\t\t\t\treturn lastName;\n\t\t\t} else {\n\t\t\t\tcurrent = current.replace(',', '');\n\n\t\t\t\t// handle case where suffix is included in part of last name (ie: 'Hearst Jr., Willian Randolph')\n\t\t\t\tif (suffixes.indexOf(current.toLowerCase().replace(/\\./g, '')) > -1) {\n\t\t\t\t\tattrs.suffix = current;\n\t\t\t\t} else {\n\t\t\t\t\tlastName.push(current);\n\t\t\t\t}\n\n\t\t\t\tfirstNameIndex = index + 1;\n\t\t\t\treturn lastName.join(' ');\n\t\t\t}\n\t\t}, []);\n\n\t\tattrs.lastName = lastName;\n\n\t\tvar remainingParts = parts.slice(firstNameIndex);\n\t\tif (remainingParts.length > 1) {\n\t\t\tattrs.firstName = remainingParts.shift();\n\t\t\tattrs.middleName = remainingParts.join(' ');\n\t\t} else if (remainingParts.length) {\n\t\t\tattrs.firstName = remainingParts[0];\n\t\t}\n\n\t\t//create full name from attrs object\n\t\tconst nameWords = [];\n\t\tif (attrs.firstName) {\n\t\t\tnameWords.push(attrs.firstName);\n\t\t}\n\t\tif (attrs.middleName) {\n\t\t\tnameWords.push(attrs.middleName)\n\t\t}\n\t\tnameWords.push(attrs.lastName)\n\t\tif (attrs.suffix) {\n\t\t\tnameWords.push(attrs.suffix);\n\t\t}\n\t\tattrs.fullName = nameWords.join(' ');\n\n\n\t} else {\n\t\t//first name first format\n\n\n\t\tif (parts.length > 1 && salutations.indexOf(parts[0].toLowerCase().replace(/\\./g, '')) > -1) {\n\t\t\tattrs.salutation = parts.shift();\n\n\t\t\t// if we have a salutation assume 2nd part is last name\n\t\t\tif (parts.length === 1) {\n\t\t\t\tattrs.lastName = parts.shift();\n\t\t\t} else {\n\t\t\t\tattrs.firstName = parts.shift();\n\t\t\t}\n\t\t} else {\n\t\t\tattrs.firstName = parts.shift();\n\t\t}\n\n\t\tif (!attrs.lastName) {\n\t\t\tattrs.lastName = parts.length ? parts.pop() : '';\n\t\t}\n\n\t\t// test for compound last name, we reverse because middle name is last bit to be defined.\n\t\t// We already know lastname, so check next word if its part of a compound last name.\n\t\tconst revParts = parts.slice(0).reverse();\n\t\tconst compoundParts = [];\n\n\t\trevParts.every(part => {\n\t\t\tconst test = part.toLowerCase().replace(/\\./g, '');\n\n\t\t\tif (compound.indexOf(test) > -1) {\n\t\t\t\tcompoundParts.push(part);\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t//break on first non compound word\n\t\t\treturn false;\n\t\t});\n\n\t\t//join compound parts with known last name\n\t\tif (compoundParts.length) {\n\t\t\tattrs.lastName = compoundParts.reverse().join(' ') + ' ' + attrs.lastName;\n\n\t\t\tparts = diff(parts, compoundParts);\n\t\t}\n\n\t\tif (parts.length) {\n\t\t\tattrs.middleName = parts.join(' ');\n\t\t}\n\n\t\t//remove comma like \"<lastName>, Jr.\"\n\t\tif (attrs.lastName) {\n\t\t\tattrs.lastName = attrs.lastName.replace(',', '');\n\t\t}\n\n\t\t//save a copy of original\n\t\tattrs.fullName = name;\n\n\t}\n\t//console.log('attrs:', JSON.stringify(attrs));\n\n\tfor (const [k, v] of Object.entries(attrs)) {\n\t\tattrs[k] = v.trim()\n\t}\n\treturn attrs;\n};\n\nparser.getFullestName = (str) => {\n\tlet name = str;\n\tlet names = [];\n\n\t//find fullname from strings like 'Jon and Sue Doyle'\n\tif (name.indexOf('&') > -1 || name.toLowerCase().indexOf(' and ') > -1) {\n\t\tnames = name.split(/\\s+(?:and|&)\\s+/gi);\n\n\t\t//pluck the name with the most parts (first, middle, last) from the array.\n\t\t//will grab 'Sue Doyle' in 'Jon & Sue Anne Doyle'\n\t\tif (names.length) {\n\t\t\tname = names.sort(function (a, b) {\n\t\t\t\treturn b.split(/\\s+/).length - a.split(/\\s+/).length;\n\t\t\t})[0];\n\t\t}\n\t}\n\n\treturn name;\n};\n\nparser.parseAddress = (str) => {\n\tstr = str.replace(/\\n/gi, ', ');\n\t//416 W. Manchester Blvd., Inglewood, CA  90301\n\tconst parts = str.split(/,\\s+/).reverse();\n\tlet stateZip;\n\tlet city;\n\tconst address = {};\n\n\tstateZip = parts[0].split(/\\s+/);\n\tparts.shift();\n\n\tcity = parts.shift();\n\n\taddress.address = parts.reverse().join(', ');\n\taddress.city = city;\n\taddress.state = stateZip[0];\n\taddress.zip = stateZip[1];\n\taddress.fullAddress = str;\n\n\treturn address;\n};\n","global.splitName = require('./index');\n"],"names":["$f5bb48c3f168235d$var$combineFirstName","param","salutation","firstName","middleName","filter","s","join","trim","$f5bb48c3f168235d$var$combineLastName","lastName","suffix","$f5bb48c3f168235d$var$normalizeNameWithTitle","parts","i","names","length","$f5bb48c3f168235d$var$normalizeMiddleName","test","$f5bb48c3f168235d$var$splitter","module","exports","name","conjuction","match","toLowerCase","split","map","$iuC0S","name1","$SGwGH","parseName","combineFirstName","combineLastName","combineFullName","$d76883f5527097f8$var$namecase","input","opt","Array","isArray","el","splitters","r","elArr","j","charAt","toUpperCase","slice","replace","x","y","z","substring","v","individualFields","$d76883f5527097f8$var$nc","checkName","normalize","$0a460815174d5071$var$parser","ignoreSuffix","salutations","suffixes","includes","compound","n","attrs","indexOf","pop","every","part","shift","revParts","reverse","compoundParts","push","a2","concat","val","index","arr","lastIndexOf","fullName","firstNameIndex","reduce","lastName1","current","remainingParts","nameWords","k","Object","entries","getFullestName","str","sort","a","b","parseAddress","stateZip","city","address","state","zip","fullAddress","$parcel$global","splitName","parcelRequire"],"version":3,"file":"split-human-name.min.js.map"}